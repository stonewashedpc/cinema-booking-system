package MetaModel.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenAspectBase;
import MetaModel.structure.LanguageConceptSwitch;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.text.rt.TextGenDescriptor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.text.rt.TextGenModelOutline;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class TextGenAspectDescriptor extends TextGenAspectBase {
  private final LanguageConceptSwitch myIndex = new LanguageConceptSwitch();

  public TextGenAspectDescriptor() {
  }

  @Nullable
  @Override
  public TextGenDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    switch (myIndex.index(concept)) {
      case LanguageConceptSwitch.Service:
        return new Service_TextGen();
    }
    return null;
  }

  @Override
  public void breakdownToUnits(@NotNull TextGenModelOutline outline) {
    for (SNode root : outline.getModel().getRootNodes()) {
      if (root.getConcept().equals(CONCEPTS.Service$gZ)) {
        String fname = getFileName_Service(root);
        String ext = getFileExtension_Service(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
    }
  }
  private static String getFileName_Service(SNode node) {
    return node.getName();
  }
  private static String getFileExtension_Service(SNode node) {
    return "tst";
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Service$gZ = MetaAdapterFactory.getConcept(0x9859e7a148764909L, 0xa6648a214c206698L, 0x355f4a6bd0ef9b51L, "MetaModel.structure.Service");
  }
}
